spring.application.name=service-instance-peer
eureka.instance.appname=service-instance-peer
eureka.instance.virtualHostName=service-instance-peer
eureka.instance.secureVirtualHostName=service-instance-peer

server.port=8878
#将自己注册到eureka注册中心，单节点关闭 
eureka.client.registerWithEureka=true
#从注册中心获取注册信息，单节点关闭 
eureka.client.fetchRegistry=true
#从注册中心获取注册信息的时间间隔
eureka.client.registryFetchIntervalSeconds=10
#非安全通信端口
#eureka.instance.nonSecurePort=80
#是否启用非安全端口接受请求
#eureka.instance.nonSecurePortEnabled=true
#安全通信端口
#eureka.instance.securePort=443
#是否启用安全端口接受请求
#eureka.instance.securePortEnabled=true
#是否优先使用IP地址作为主机名的标识，默认false
#eureka.instance.preferIpAddress=false
#eureka节点定时续约时间，默认30
eureka.instance.leaseRenewalIntervalInSeconds=15
#eureka节点剔除时间，默认90
eureka.instance.leaseExpirationDurationInSeconds=45
#从注册中心获取注册信息的时间间隔
eureka.client.registry-fetch-interval-seconds=5
eureka.client.eureka-server-connect-timeout-seconds=15
eureka.client.eureka-server-read-timeout-seconds=10

eureka.instance.instance-id=${spring.cloud.client.ip-address}:${eureka.instance.appname}:${server.port}
#注册到另外两个节点，实现集群
eureka.client.serviceUrl.defaultZone=http://localhost:8888/eureka/
#eureka.client.serviceUrl.defaultZone=http://localhost:8887/eureka/,http://localhost:8888/eureka/,http://localhost:8889/eureka/

#conusl
spring.cloud.consul.host=localhost
spring.cloud.consul.port=8500
spring.cloud.consul.discovery.register=true
#spring.cloud.consul.discovery.hostname=localhost
spring.cloud.consul.discovery.serviceName=${spring.application.name}
spring.cloud.consul.discovery.tags=version=1.0,author=chandler
spring.cloud.consul.discovery.healthCheckPath=/actuator/health
spring.cloud.consul.discovery.healthCheckInterval=5s
spring.cloud.consul.discovery.instanceId=${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}

#actuator
management.endpoint.shutdown.enabled=true
management.endpoints.web.exposure.include=* 
management.endpoints.web.exposure.exclude=
management.endpoint.health.show-details=always
management.health.elasticsearch.enabled=true

management.info.git.mode=full
#info接口展示
info.app.name=${eureka.instance.appname}
info.app.description=@project.description@
info.app.version=@project.version@
info.app.encoding=@project.build.sourceEncoding@
info.app.java.version=@java.version@


# 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
server.undertow.io-threads=19
# 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载
server.undertow.worker-threads=20
# 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
server.undertow.buffer-size=1024
# 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region
server.undertow.buffers-per-region=2048
# 是否分配的直接内存
server.undertow.direct-buffers=true
#最大分区数量
server.undertow.max-regions=10
#socket-binding="http"，保持长连接
server.undertow.always-set-keep-alive=true
